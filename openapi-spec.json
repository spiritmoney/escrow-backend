{
  "openapi": "3.0.0",
  "paths": {
    "/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "user": {
                      "id": "1234567890123456",
                      "email": "user@example.com",
                      "firstName": "John",
                      "lastName": "Doe",
                      "organisation": "Acme Corp",
                      "role": "DEVELOPER",
                      "isVerified": false,
                      "createdAt": "2024-01-01T00:00:00.000Z"
                    },
                    "apiKey": "esp_1234567890abcdef...",
                    "wallets": {
                      "custodial": {
                        "created": true,
                        "count": 3,
                        "networks": [
                          "Circles"
                        ]
                      },
                      "circle": {
                        "status": "success",
                        "created": true,
                        "count": 2,
                        "blockchains": [
                          "ETH-SEPOLIA",
                          "MATIC-AMOY"
                        ],
                        "configured": true
                      }
                    },
                    "message": "User created successfully"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Email already exists"
          }
        },
        "summary": "Register new user",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "access_token": "eyJhbGciOiJIUzI1...",
                    "user": {
                      "id": "1234567890123456",
                      "email": "user@example.com",
                      "firstName": "John",
                      "lastName": "Doe",
                      "organisation": "Acme Corp",
                      "role": "DEVELOPER",
                      "walletAddress": "0x..."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Login user",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/verify-otp": {
      "post": {
        "operationId": "AuthController_verifyOTP",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOtpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified successfully"
          },
          "400": {
            "description": "Invalid OTP"
          }
        },
        "summary": "Verify email with OTP",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/request-password-reset": {
      "post": {
        "operationId": "AuthController_requestPasswordReset",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPasswordResetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset instructions sent"
          }
        },
        "summary": "Request password reset",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/reset-password": {
      "post": {
        "operationId": "AuthController_resetPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful"
          },
          "400": {
            "description": "Invalid OTP or password"
          }
        },
        "summary": "Reset password with OTP",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/profile": {
      "get": {
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "1234567890123456",
                    "email": "user@example.com",
                    "firstName": "John",
                    "lastName": "Doe",
                    "organisation": "Acme Corp",
                    "role": "DEVELOPER"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user profile",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/refresh": {
      "post": {
        "operationId": "AuthController_refreshToken",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Refresh access token",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/change-password": {
      "post": {
        "operationId": "AuthController_changePassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Change password",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/2fa/enable": {
      "post": {
        "operationId": "AuthController_enable2FA",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Enable 2FA",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/2fa/verify": {
      "post": {
        "operationId": "AuthController_verify2FA",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Verify 2FA token",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/2fa/disable": {
      "post": {
        "operationId": "AuthController_disable2FA",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Disable 2FA",
        "tags": [
          "auth"
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "AppController_healthCheck",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "status": "ok"
                  }
                }
              }
            }
          }
        },
        "summary": "Lightweight health check endpoint",
        "tags": [
          "health"
        ]
      }
    },
    "/balance": {
      "get": {
        "operationId": "BalanceController_getBalances",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User balances retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "fiat": {
                      "NGN": 5678910,
                      "USD": 12345.67,
                      "EUR": 8234.5,
                      "GBP": 9876.54
                    },
                    "crypto": {
                      "USDC": {
                        "amount": 1000,
                        "usdValue": 1000
                      },
                      "USDT": {
                        "amount": 500,
                        "usdValue": 500
                      },
                      "ESPEES": {
                        "amount": 2000,
                        "usdValue": 2000
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error fetching balance"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user balances",
        "tags": [
          "balance"
        ]
      }
    },
    "/balance/send": {
      "post": {
        "operationId": "BalanceController_sendMoney",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMoneyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transfer completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Transfer completed successfully",
                    "transactionHash": "0x123..."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid recipient details"
          },
          "401": {
            "description": "Authentication failed"
          },
          "404": {
            "description": "Recipient not found"
          },
          "422": {
            "description": "Insufficient balance for this transaction"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send money or crypto",
        "tags": [
          "balance"
        ]
      }
    },
    "/balance/request": {
      "post": {
        "operationId": "BalanceController_requestPayment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPaymentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment request created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Payment request created successfully",
                    "requestId": "abc123",
                    "paymentLink": "https://example.com/pay/abc123"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed to create payment request"
          },
          "401": {
            "description": "Authentication failed"
          },
          "500": {
            "description": "An internal server error occurred"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Request payment",
        "tags": [
          "balance"
        ]
      }
    },
    "/balance/withdraw": {
      "post": {
        "operationId": "BalanceController_withdraw",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Withdrawal request submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Withdrawal request submitted successfully. You will receive an email confirmation shortly.",
                    "withdrawalId": "wd_123456",
                    "amount": 500,
                    "currency": "USD",
                    "status": "PENDING"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Withdraw funds",
        "tags": [
          "balance"
        ]
      }
    },
    "/balance/convert": {
      "post": {
        "operationId": "BalanceController_convertCurrency",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertCurrencyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Currency conversion successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "convertedAmount": {
                      "type": "number",
                      "example": 1800
                    },
                    "rate": {
                      "type": "number",
                      "example": 1800
                    },
                    "from": {
                      "type": "string",
                      "example": "ESP"
                    },
                    "to": {
                      "type": "string",
                      "example": "NGN"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Convert between currencies",
        "tags": [
          "balance"
        ]
      },
      "get": {
        "operationId": "BalanceController_convertAmount",
        "parameters": [
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "from",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "balance"
        ]
      }
    },
    "/balance/rates": {
      "get": {
        "operationId": "BalanceController_getExchangeRates",
        "parameters": [
          {
            "name": "base",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exchange rates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "base": "USD",
                    "rates": {
                      "EUR": 0.85,
                      "GBP": 0.75,
                      "NGN": 411.5,
                      "USDC": 1,
                      "USDT": 1,
                      "ESPEES": 1
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current exchange rates",
        "tags": [
          "balance"
        ]
      }
    },
    "/balance/crypto/price": {
      "get": {
        "operationId": "BalanceController_getCryptoPrice",
        "parameters": [
          {
            "name": "symbol",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "balance"
        ]
      }
    },
    "/balance/recent-activity": {
      "get": {
        "operationId": "BalanceController_getRecentActivity",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Recent activity retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "type": "RECEIVED",
                      "currency": "USDC",
                      "amount": 100,
                      "timestamp": "2024-03-20T10:00:00Z",
                      "description": "Payment received"
                    },
                    {
                      "type": "SENT",
                      "currency": "USD",
                      "amount": 50,
                      "timestamp": "2024-03-20T07:00:00Z",
                      "description": "Transfer to john@example.com"
                    },
                    {
                      "type": "WITHDRAWAL",
                      "currency": "EUR",
                      "amount": 200,
                      "timestamp": "2024-03-19T15:30:00Z",
                      "description": "Bank withdrawal"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "500": {
            "description": "An internal server error occurred"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get recent balance activity",
        "tags": [
          "balance"
        ]
      }
    },
    "/payment-links": {
      "get": {
        "operationId": "PaymentLinkController_getPaymentLinks",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Payment links retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "links": [
                      {
                        "id": "lnk_123456",
                        "name": "Payment for Services",
                        "amount": 100,
                        "currency": "USD",
                        "url": "https://pay.paylinc.org/lnk_123456",
                        "status": "ACTIVE",
                        "createdAt": "2024-01-15T10:30:00Z"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user payment links",
        "tags": [
          "payment-links"
        ]
      },
      "post": {
        "operationId": "PaymentLinkController_createPaymentLink",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentLinkDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment link created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Payment link created successfully",
                    "link": {
                      "id": "lnk_123456",
                      "name": "Payment for Services",
                      "amount": 100,
                      "currency": "USD",
                      "url": "https://pay.paylinc.org/lnk_123456",
                      "status": "ACTIVE"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new payment link",
        "tags": [
          "payment-links"
        ]
      }
    },
    "/payment-links/{id}": {
      "get": {
        "operationId": "PaymentLinkController_getPaymentLinkDetails",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment link details retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "lnk_123456",
                    "name": "Payment for Services",
                    "amount": 100,
                    "currency": "USD",
                    "paymentMethods": {
                      "card": true,
                      "crypto": true
                    },
                    "createdBy": {
                      "name": "John Doe",
                      "email": "john@example.com"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get payment link details (public)",
        "tags": [
          "payment-links"
        ]
      },
      "patch": {
        "operationId": "PaymentLinkController_updatePaymentLink",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentLinkDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment link updated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update payment link",
        "tags": [
          "payment-links"
        ]
      },
      "delete": {
        "operationId": "PaymentLinkController_deletePaymentLink",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment link deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete payment link",
        "tags": [
          "payment-links"
        ]
      }
    },
    "/payment-links/{id}/initialize": {
      "post": {
        "operationId": "PaymentLinkController_initializePayment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessPaymentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment initialized successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Payment initialized successfully",
                    "paymentLink": {
                      "id": "lnk_123456",
                      "name": "Payment for Services",
                      "amount": 100,
                      "currency": "USD"
                    },
                    "transactionId": "txn_123456"
                  }
                }
              }
            }
          }
        },
        "summary": "Initialize payment for frontend",
        "tags": [
          "payment-links"
        ]
      }
    },
    "/payment-links/{id}/confirm": {
      "post": {
        "operationId": "PaymentLinkController_confirmPayment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment confirmed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Payment confirmed successfully",
                    "transaction": {
                      "id": "txn_123456",
                      "status": "COMPLETED",
                      "amount": 100,
                      "currency": "USD"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Confirm payment completion",
        "tags": [
          "payment-links"
        ]
      }
    },
    "/payment-links/transactions/{id}": {
      "get": {
        "operationId": "PaymentLinkController_getTransactionDetails",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction details retrieved successfully"
          },
          "404": {
            "description": "Transaction not found"
          }
        },
        "summary": "Get transaction details",
        "tags": [
          "payment-links"
        ]
      }
    },
    "/profile": {
      "get": {
        "operationId": "ProfileController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Profile details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "firstName": "John",
                    "lastName": "Doe",
                    "email": "john@example.com",
                    "phone": "+1 234 567 8900",
                    "organisation": "Acme Corp",
                    "kycLevel": "Level 1",
                    "transactionLimit": "$1,000/day",
                    "apiKey": "********",
                    "twoFactorEnabled": false,
                    "apiAccess": true,
                    "webhookNotifications": false
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user profile details",
        "tags": [
          "profile"
        ]
      }
    },
    "/profile/personal-info": {
      "put": {
        "operationId": "ProfileController_updatePersonalInfo",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update personal information",
        "tags": [
          "profile"
        ]
      }
    },
    "/profile/photo": {
      "post": {
        "operationId": "ProfileController_updateProfilePhoto",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Profile photo updated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update profile photo",
        "tags": [
          "profile"
        ]
      },
      "delete": {
        "operationId": "ProfileController_deleteProfilePhoto",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Profile photo deleted successfully"
          },
          "404": {
            "description": "Profile photo not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete profile photo",
        "tags": [
          "profile"
        ]
      }
    },
    "/profile/security": {
      "put": {
        "operationId": "ProfileController_updateSecuritySettings",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSecuritySettingsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Security settings updated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update security settings",
        "tags": [
          "profile"
        ]
      }
    },
    "/profile/api-settings": {
      "put": {
        "operationId": "ProfileController_updateApiSettings",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSettingsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "API settings updated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update API settings",
        "tags": [
          "profile"
        ]
      }
    },
    "/profile/regenerate-api-key": {
      "post": {
        "operationId": "ProfileController_regenerateApiKey",
        "parameters": [],
        "responses": {
          "200": {
            "description": "API key regenerated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Regenerate API key",
        "tags": [
          "profile"
        ]
      }
    },
    "/profile/kyc-status": {
      "get": {
        "operationId": "ProfileController_getKycStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "KYC status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "currentLevel": "Level 1",
                    "transactionLimit": "$1,000/day",
                    "verificationRequired": true
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get KYC verification status",
        "tags": [
          "profile"
        ]
      }
    }
  },
  "info": {
    "title": "EspeePay API",
    "description": "The EspeePay API documentation",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "auth",
      "description": "Authentication endpoints"
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "User email address"
          },
          "password": {
            "type": "string",
            "example": "Test123!@#",
            "description": "User password (min 8 characters)"
          },
          "firstName": {
            "type": "string",
            "example": "John",
            "description": "User first name"
          },
          "lastName": {
            "type": "string",
            "example": "Doe",
            "description": "User last name"
          },
          "country": {
            "type": "string",
            "example": "US",
            "description": "User country"
          },
          "organisation": {
            "type": "string",
            "example": "Acme Corp",
            "description": "User organization"
          },
          "role": {
            "type": "string",
            "enum": [
              "BUSINESS",
              "DEVELOPER"
            ],
            "example": "DEVELOPER",
            "description": "User role (BUSINESS or DEVELOPER)"
          },
          "referralCode": {
            "type": "string",
            "description": "Optional referral code"
          }
        },
        "required": [
          "email",
          "password",
          "firstName",
          "lastName",
          "country",
          "organisation",
          "role"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "User email address"
          },
          "password": {
            "type": "string",
            "example": "Test123!@#",
            "description": "User password (min 8 characters)"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "VerifyOtpDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "User email address"
          },
          "otp": {
            "type": "string",
            "example": "123456",
            "description": "6-digit OTP code"
          }
        },
        "required": [
          "email",
          "otp"
        ]
      },
      "RequestPasswordResetDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "User email address"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "User email address"
          },
          "otp": {
            "type": "string",
            "example": "123456",
            "description": "6-digit OTP code"
          },
          "newPassword": {
            "type": "string",
            "example": "NewTest123!@#",
            "description": "New password (min 8 characters)"
          }
        },
        "required": [
          "email",
          "otp",
          "newPassword"
        ]
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        },
        "required": [
          "currentPassword",
          "newPassword"
        ]
      },
      "SendMoneyDto": {
        "type": "object",
        "properties": {
          "assetType": {
            "type": "string",
            "enum": [
              "FIAT",
              "CRYPTO"
            ],
            "example": "FIAT",
            "description": "Type of asset to send"
          },
          "recipientAddress": {
            "type": "string",
            "example": "user@example.com",
            "description": "Recipient email or wallet address"
          },
          "amount": {
            "type": "number",
            "example": 1000,
            "description": "Amount to send"
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "GBP",
              "EUR",
              "NGN",
              "USDC",
              "USDT",
              "ESPEES"
            ],
            "example": "USD",
            "description": "Currency for the transfer"
          },
          "note": {
            "type": "string",
            "example": "Payment for services",
            "description": "Optional note for the transaction"
          }
        },
        "required": [
          "assetType",
          "recipientAddress",
          "amount",
          "currency"
        ]
      },
      "RequestPaymentDto": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "GBP",
              "EUR",
              "NGN",
              "USDC",
              "USDT",
              "ESPEES"
            ],
            "example": "USD",
            "description": "Currency for payment request"
          },
          "amount": {
            "type": "number",
            "example": 1000,
            "description": "Amount to request"
          },
          "payerEmail": {
            "type": "string",
            "example": "payer@example.com",
            "description": "Email of the person who should pay"
          },
          "description": {
            "type": "string",
            "example": "Invoice for February services",
            "description": "Description of the payment request"
          }
        },
        "required": [
          "currency",
          "amount",
          "payerEmail",
          "description"
        ]
      },
      "WithdrawDto": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "GBP",
              "EUR",
              "NGN",
              "USDC",
              "USDT",
              "ESPEES"
            ],
            "example": "USD",
            "description": "Currency to withdraw"
          },
          "amount": {
            "type": "number",
            "example": 500,
            "description": "Amount to withdraw"
          },
          "accountNameOrAddress": {
            "type": "string",
            "example": "John Doe",
            "description": "Bank account holder name (for fiat) or crypto address (for crypto)"
          },
          "accountNumber": {
            "type": "string",
            "example": "1234567890",
            "description": "Bank account number (required for fiat withdrawals)"
          },
          "bankName": {
            "type": "string",
            "example": "First Bank of Nigeria",
            "description": "Bank name (required for fiat withdrawals)"
          },
          "bankCode": {
            "type": "string",
            "example": "12345",
            "description": "Bank sort code or routing number (required for some fiat withdrawals)"
          }
        },
        "required": [
          "currency",
          "amount",
          "accountNameOrAddress"
        ]
      },
      "ConvertCurrencyDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount to convert",
            "example": 100
          },
          "from": {
            "type": "string",
            "enum": [
              "USD",
              "GBP",
              "EUR",
              "NGN",
              "USDC",
              "USDT",
              "ESPEES"
            ],
            "description": "Source currency",
            "example": "USD"
          },
          "to": {
            "type": "string",
            "enum": [
              "USD",
              "GBP",
              "EUR",
              "NGN",
              "USDC",
              "USDT",
              "ESPEES"
            ],
            "description": "Target currency",
            "example": "EUR"
          }
        },
        "required": [
          "amount",
          "from",
          "to"
        ]
      },
      "CreatePaymentLinkDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name/description of the payment link",
            "example": "Payment for Design Services"
          },
          "amount": {
            "type": "number",
            "description": "Amount to be received",
            "example": 100,
            "minimum": 0.01
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "GBP",
              "EUR",
              "NGN",
              "USDC",
              "USDT",
              "ESPEES"
            ],
            "description": "Currency for the payment",
            "example": "USD"
          }
        },
        "required": [
          "name",
          "amount",
          "currency"
        ]
      },
      "ProcessPaymentDto": {
        "type": "object",
        "properties": {
          "customerEmail": {
            "type": "string",
            "description": "Customer email address",
            "example": "customer@example.com"
          },
          "customerName": {
            "type": "string",
            "description": "Customer name",
            "example": "John Doe"
          },
          "paymentMethodToken": {
            "type": "string",
            "description": "Payment method token"
          },
          "cryptoAddress": {
            "type": "string",
            "description": "Crypto wallet address for crypto payments"
          }
        },
        "required": [
          "customerEmail",
          "customerName"
        ]
      },
      "UpdatePaymentLinkDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name/description of the payment link"
          },
          "amount": {
            "type": "number",
            "description": "Amount to be received",
            "minimum": 0.01
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "GBP",
              "EUR",
              "NGN",
              "USDC",
              "USDT",
              "ESPEES"
            ],
            "description": "Currency for the payment"
          }
        }
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "example": "+1 234 567 8900",
            "description": "User phone number"
          },
          "photoUrl": {
            "type": "string",
            "example": "https://storage.cloud.com/profile-images/user123.jpg",
            "description": "Profile image URL"
          }
        },
        "required": [
          "phone"
        ]
      },
      "UpdateSecuritySettingsDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "Current password"
          },
          "newPassword": {
            "type": "string",
            "description": "New password"
          },
          "confirmNewPassword": {
            "type": "string",
            "description": "Confirm new password"
          },
          "twoFactorEnabled": {
            "type": "boolean",
            "description": "Enable/disable two-factor authentication"
          }
        },
        "required": [
          "currentPassword",
          "newPassword",
          "confirmNewPassword"
        ]
      },
      "ApiSettingsDto": {
        "type": "object",
        "properties": {
          "apiAccess": {
            "type": "boolean",
            "description": "Enable/disable API access"
          },
          "webhookNotifications": {
            "type": "boolean",
            "description": "Enable/disable webhook notifications"
          }
        }
      }
    }
  }
}