generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                     @id @default(cuid())
  email                String                     @unique
  password             String
  firstName            String
  lastName             String
  country              String
  organisation         String
  role                 UserRole                   @default(DEVELOPER)
  walletAddress        String?
  status               String                     @default("ACTIVE")
  name                 String?                    // Add name field for customer compatibility
  isVerified           Boolean                    @default(false)
  otp                  String?
  otpExpiry            DateTime?
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  balance              Balance?                   @relation("UserBalance")
  wallets              Wallet[]                   @relation("UserWallets")
  sentTransactions     Transaction[]              @relation("SentTransactions")
  receivedTransactions Transaction[]              @relation("ReceivedTransactions")
  customerTransactions Transaction[]              @relation("CustomerTransactions")
  paymentRequests      PaymentRequest[]
  paymentLinks         PaymentLink[]
  paymentLinkSettings  PaymentLinkSettings?
  initiatedDisputes    Dispute[]                  @relation("DisputeInitiator")
  resolvedDisputes     Dispute[]                  @relation("DisputeResolver")

  paymentMethods       PaymentMethod[]
  autoPaymentSettings  AutoPaymentSettings?
  billingHistory       BillingHistory[]
  phone                String?
  photoUrl             String?
  twoFactorEnabled     Boolean                    @default(false)
  twoFactorSecret      String?
  apiSettings          ApiSettings?
  kycVerification      KycVerification?

  cryptoReservations   CryptoBalanceReservation[]
  custodialWallets     CustodialWallet[]
  notifications        Notification[]
  withdrawals          Withdrawal[]

  @@map("users")
}

enum UserRole {
  BUSINESS
  DEVELOPER
}

model Balance {
  id        String   @id @default(cuid())
  userId    String   @unique
  ngn       Float    @default(0)
  usd       Float    @default(0)
  eur       Float    @default(0)
  gbp       Float    @default(0)
  usdc      Float    @default(0)
  usdt      Float    @default(0)
  espees    Float    @default(0)
  esp       Float    @default(0)
  user      User     @relation("UserBalance", fields: [userId], references: [id])
  updatedAt DateTime @updatedAt

  @@map("balances")
}

model Withdrawal {
  id                   String   @id @default(cuid())
  userId               String
  amount               Float
  currency             String
  accountNameOrAddress String
  accountNumber        String?
  bankName             String?
  bankCode             String?
  status               String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  processedAt          DateTime?
  user                 User     @relation(fields: [userId], references: [id])

  @@map("withdrawals")
}

model Transaction {
  id                String      @id @default(cuid())
  senderId          String?
  recipientId       String?
  recipientWallet   String?
  customerId        String?
  amount            Float
  currency          String
  type              String
  status            String      @default("PENDING")
  note              String?
  txHash            String?
  chainId           Int?
  tokenAddress      String?
  escrowAddress     String?
  paymentMethod     String?
  paymentDetails    Json?
  metadata          Json?
  customerEmail     String?
  customerName      String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  expiresAt         DateTime?
  completedAt       DateTime?
  paymentLinkId     String?
  originalAmount    Float?
  originalCurrency  String?
  paymentConfirmed  Boolean     @default(false)
  buyerConfirmed    Boolean     @default(false)
  sellerConfirmed   Boolean     @default(false)
  verificationState String?
  data              Json?
  sender            User?       @relation("SentTransactions", fields: [senderId], references: [id])
  recipient         User?       @relation("ReceivedTransactions", fields: [recipientId], references: [id])
  customer          User?       @relation("CustomerTransactions", fields: [customerId], references: [id], map: "transactions_user_customer_fkey")
  customerRef       Customer?   @relation("CustomerTransactions", fields: [customerId], references: [id], map: "transactions_customer_ref_fkey")
  paymentLink       PaymentLink? @relation(fields: [paymentLinkId], references: [id])
  disputes          Dispute[]
  milestones        Milestone[]
  sandboxData       Json?      // For sandbox-specific data
  dealStage         String?    // Current deal stage

  @@map("transactions")
}

model PaymentRequest {
  id          String   @id @default(cuid())
  requesterId String
  payerEmail  String
  amount      Float
  currency    String
  description String
  status      String // 'PENDING', 'PAID', 'CANCELLED'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requester   User     @relation(fields: [requesterId], references: [id])

  @@map("payment_requests")
}

model Wallet {
  id                  String   @id @default(cuid())
  userId              String
  address             String   @unique
  encryptedPrivateKey String
  iv                  String
  network             String
  type                String
  chainId             Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation("UserWallets", fields: [userId], references: [id])

  @@unique([userId, network])
  @@index([userId])
  @@map("wallets")
}

model PaymentLink {
  id                 String    @id @default(cuid())
  userId             String
  name               String
  url                String    @unique
  type               String    // BUYING or SELLING
  transactionType    String    // CRYPTOCURRENCY, SERVICES, or DEALS
  defaultAmount      Float
  defaultCurrency    String
  isAmountNegotiable Boolean   @default(false)
  minimumAmount      Float?
  maximumAmount      Float?
  paymentMethods     Json      // Array of payment method objects
  serviceDetails     Json?     // Service details as JSON
  serviceProof       Json?     // Service proof requirements as JSON
  metadata           Json?     // Additional metadata
  verificationMethod String
  allowedBuyers      String[]  @default([])
  status             String    @default("ACTIVE")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  transactions       Transaction[]
  details            Json?     // Add this field for cryptocurrency details
  isSandbox          Boolean   @default(true)
  sandboxMetadata    Json?     // For sandbox-specific data
  dealStages         Json?     // For deal-specific stages
  completedStages    String[]  @default([])

  user               User                @relation(fields: [userId], references: [id])
  paymentLinkMethods PaymentLinkMethod[]

  @@map("payment_links")
}

model PaymentLinkMethod {
  id            String      @id @default(uuid())
  paymentLinkId String
  methodId      String
  type          String
  isDefault     Boolean     @default(false)
  details       Json
  paymentLink   PaymentLink @relation(fields: [paymentLinkId], references: [id], onDelete: Cascade)

  @@map("payment_link_methods")
}

model PaymentLinkSettings {
  id                    String @id @default(cuid())
  userId                String @unique
  defaultCurrency       String @default("USD")
  defaultExpirationTime Int    @default(24) // hours
  user                  User   @relation(fields: [userId], references: [id])

  @@map("payment_link_settings")
}

model Dispute {
  id              String      @id @default(cuid())
  transactionId   String
  transaction     Transaction @relation(fields: [transactionId], references: [id])
  initiatorId     String
  initiator       User        @relation("DisputeInitiator", fields: [initiatorId], references: [id])
  resolverId      String?
  resolver        User?       @relation("DisputeResolver", fields: [resolverId], references: [id])
  status          String
  reason          String
  evidence        String[]
  resolutionNotes String?
  createdAt       DateTime    @default(now())
  resolvedAt      DateTime?
  updatedAt       DateTime    @updatedAt

  @@map("disputes")
}

model PaymentMethod {
  id        String   @id @default(cuid())
  userId    String
  type      String
  details   Json
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("payment_methods")
}

model AutoPaymentSettings {
  id                   String  @id @default(cuid())
  userId               String  @unique
  enabled              Boolean @default(false)
  defaultPaymentMethod String?
  autoPaymentLimit     Float?
  user                 User    @relation(fields: [userId], references: [id])

  @@map("auto_payment_settings")
}

model BillingHistory {
  id            String   @id @default(cuid())
  userId        String

  amount        Float
  currency      String
  description   String
  status        String   @default("PENDING")
  paidAt        DateTime?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])


  @@map("billing_history")
}



model ApiSettings {
  id        String   @id @default(cuid())
  userId    String   @unique
  apiKey    String   @unique
  webhookUrl String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("api_settings")
}

model KycVerification {
  id            String   @id @default(cuid())
  userId        String   @unique
  documentType  String
  documentUrl   String
  status        String   @default("PENDING")
  verifiedAt    DateTime?
  rejectedAt    DateTime?
  rejectionReason String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])

  @@map("kyc_verifications")
}



model Milestone {
  id            String      @id @default(cuid())
  transactionId String
  name          String
  description   String?
  amount        Float
  status        String      @default("PENDING")
  dueDate       DateTime?
  completedAt   DateTime?
  createdAt     DateTime    @default(now())
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@map("milestones")
}

enum VerificationStatus {
  PENDING
  VERIFIED
  FAILED
  EXPIRED
}

enum VerificationMethod {
  SELLER_PROOF_SUBMISSION
  BUYER_CONFIRMATION
  THIRD_PARTY_ARBITRATION
  BLOCKCHAIN_CONFIRMATION
}

model CryptoBalanceReservation {
  id            String   @id @default(cuid())
  userId        String
  currency      String
  amount        Float
  reservedFor   String
  referenceId   String?
  expiresAt     DateTime
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])

  @@map("crypto_balance_reservations")
}

model CustodialWallet {
  id              String                    @id @default(cuid())
  userId          String
  currency        String
  address         String                    @unique
  balance         Float                     @default(0)
  network         String
  isActive        Boolean                   @default(true)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  user            User                      @relation(fields: [userId], references: [id])
  balanceHistory  CustodialBalanceHistory[]

  @@unique([userId, currency, network])
  @@map("custodial_wallets")
}

model CustodialBalanceHistory {
  id               String          @id @default(cuid())
  walletId         String
  previousBalance  Float
  newBalance       Float
  changeAmount     Float
  changeType       String          // 'CREDIT', 'DEBIT'
  reason           String
  transactionId    String?
  createdAt        DateTime        @default(now())
  wallet           CustodialWallet @relation(fields: [walletId], references: [id])

  @@map("custodial_balance_history")
}




model Customer {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  phone        String?
  address      Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[] @relation("CustomerTransactions")

  @@map("customers")
}



model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}
