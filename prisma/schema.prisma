generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @db.VarChar(16)
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  country       String
  organisation  String
  walletAddress String?   @unique
  role          UserRole  @default(DEVELOPER)
  isVerified    Boolean   @default(false)
  otp           String?
  otpExpiry     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  balance          Balance?
  wallet           Wallet?
  sentTransactions     Transaction[] @relation("SentTransactions")
  receivedTransactions Transaction[] @relation("ReceivedTransactions")
  paymentRequests      PaymentRequest[]
  paymentLinks         PaymentLink[]
  paymentLinkSettings  PaymentLinkSettings?
  initiatedDisputes Dispute[] @relation("DisputeInitiator")
  resolvedDisputes  Dispute[] @relation("DisputeResolver")
  subscriptions      Subscription[]
  paymentMethods     PaymentMethod[]
  autoPaymentSettings AutoPaymentSettings?
  billingHistory     BillingHistory[]

  @@map("users")
}

enum UserRole {
  BUSINESS
  DEVELOPER
} 

model Balance {
  id        String   @id @default(cuid())
  userId    String   @unique
  ngn       Float    @default(0)
  usd       Float    @default(0)
  eur       Float    @default(0)
  esp       Float    @default(0)
  user      User     @relation(fields: [userId], references: [id])
  updatedAt DateTime @updatedAt

  @@map("balances")
}

model Transaction {
  id              String    @id @default(cuid())
  senderId        String
  recipientId     String?
  recipientWallet String?
  amount          Float
  currency        String
  type            String    // 'FIAT', 'CRYPTO', 'ESCROW', or 'GOODS'
  status          String
  note            String?
  txHash          String?   // Blockchain transaction hash
  escrowAddress   String?   
  originalAmount  Float?    
  originalCurrency String?  
  paymentMethod    String?    
  paymentDetails   Json?      
  paymentConfirmed Boolean    @default(false)
  buyerConfirmed   Boolean    @default(false)
  sellerConfirmed  Boolean    @default(false)
  createdAt       DateTime  @default(now())
  expiresAt       DateTime?
  sender          User      @relation("SentTransactions", fields: [senderId], references: [id])
  recipient       User?     @relation("ReceivedTransactions", fields: [recipientId], references: [id])
  disputes        Dispute[]

  @@map("transactions")
}

model PaymentRequest {
  id          String   @id @default(cuid())
  requesterId String
  payerEmail  String
  amount      Float
  currency    String
  description String
  status      String   // 'PENDING', 'PAID', 'CANCELLED'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requester   User     @relation(fields: [requesterId], references: [id])

  @@map("payment_requests")
}

model Wallet {
  id                 String   @id @default(cuid())
  userId             String   @unique
  address            String   @unique
  encryptedPrivateKey String
  iv                 String
  user               User     @relation(fields: [userId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("wallets")
}

model PaymentLink {
  id              String    @id @default(cuid())
  name            String
  url             String    @unique
  status          String    @default("ACTIVE")
  defaultAmount   Float?
  defaultCurrency String?
  escrowAddress   String?
  sellerAddress   String?
  buyerAddress    String?   
  type            String    // 'BUYING' or 'SELLING'
  transactionType String    // 'CRYPTOCURRENCY' or 'GOODS_SERVICES'
  description     String?   // Description for goods/services
  createdBy       User      @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("payment_links")
}

model PaymentLinkSettings {
  id                    String    @id @default(cuid())
  userId               String    @unique
  user                 User      @relation(fields: [userId], references: [id])
  defaultCurrency      String    @default("USD")
  defaultExpirationTime Int      @default(24)
  updatedAt            DateTime  @updatedAt

  @@map("payment_link_settings")
}

model Dispute {
  id              String        @id @default(cuid())
  transactionId   String
  transaction     Transaction   @relation(fields: [transactionId], references: [id])
  initiatorId     String
  initiator       User         @relation("DisputeInitiator", fields: [initiatorId], references: [id])
  resolverId      String?
  resolver        User?        @relation("DisputeResolver", fields: [resolverId], references: [id])
  status          String
  reason          String
  evidence        String[]
  resolutionNotes String?
  createdAt       DateTime     @default(now())
  resolvedAt      DateTime?
  updatedAt       DateTime     @updatedAt

  @@map("disputes")
}

model PaymentMethod {
  id        String   @id @default(cuid())
  userId    String
  type      String   // 'CARD' or 'BANK_TRANSFER'
  details   Json
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("payment_methods")
}

model AutoPaymentSettings {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  autoRenewSubscription   Boolean  @default(false)
  sendPaymentNotifications Boolean @default(true)
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id])

  @@map("auto_payment_settings")
}

model BillingHistory {
  id            String       @id @default(cuid())
  userId        String
  subscriptionId String
  billingDate   DateTime
  amount        Float
  currency      String
  status        String      // 'PAID', 'PENDING', 'FAILED'
  paymentMethod Json?
  user          User        @relation(fields: [userId], references: [id])
  subscription  Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("billing_history")
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  planType  String   @default("STARTER")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  usage     SubscriptionUsage?
  billingHistory BillingHistory[]

  @@map("subscriptions")
}

model SubscriptionUsage {
  id                  String       @id @default(cuid())
  subscriptionId      String       @unique
  monthlyTransactions Int          @default(0)
  apiCalls           Int          @default(0)
  monthlyPaymentLinks Int          @default(0)
  lastResetDate      DateTime     @default(now())
  subscription       Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("subscription_usage")
} 